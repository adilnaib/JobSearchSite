{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kdigarse\\\\Documents\\\\interview_neww\\\\src\\\\pages\\\\EmployerDashboard\\\\EmployerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport InterviewService from \"../../services/interviewService\";\nimport CreateInterviewForm from \"./CreateInterviewForm\";\nimport \"./EmployerDashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployerDashboard = () => {\n  _s();\n  const [interviews, setInterviews] = useState([]);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [selectedInterview, setSelectedInterview] = useState(null);\n\n  // Fetch interviews for the employer\n  const fetchInterviews = async () => {\n    try {\n      const response = await InterviewService.getInterviewsByEmployerId(1); // Replace with the actual employer ID\n      setInterviews(response.data);\n    } catch (error) {\n      console.error(\"Error fetching interviews:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchInterviews();\n  }, []);\n\n  // Handle interview creation\n  const handleInterviewCreated = newInterview => {\n    setInterviews(prev => [...prev, newInterview]);\n    setIsFormVisible(false);\n  };\n\n  // Handle interview cancellation\n  const handleCancelInterview = async id => {\n    try {\n      await InterviewService.cancelInterview(id);\n      alert(\"Interview cancelled successfully!\");\n      fetchInterviews();\n    } catch (error) {\n      console.error(\"Error cancelling interview:\", error);\n      alert(\"Failed to cancel the interview.\");\n    }\n  };\n\n  // Handle rescheduling\n  const handleReschedule = interview => {\n    setSelectedInterview(interview);\n    setIsFormVisible(true);\n  };\n\n  // Handle viewing interview details\n  const handleViewDetails = interview => {\n    alert(JSON.stringify(interview, null, 2));\n  };\n\n  // Get CSS class for status\n  const getStatusClass = status => {\n    switch (status) {\n      case \"Scheduled\":\n        return \"status-scheduled\";\n      case \"Cancelled\":\n        return \"status-cancelled\";\n      case \"Done\":\n        return \"status-done\";\n      default:\n        return \"status-unknown\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employer-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Employer Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"create-btn\",\n      onClick: () => {\n        setIsFormVisible(true);\n        setSelectedInterview(null);\n      },\n      children: \"Create Interview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), isFormVisible && /*#__PURE__*/_jsxDEV(CreateInterviewForm, {\n      onClose: () => setIsFormVisible(false),\n      onInterviewCreated: handleInterviewCreated,\n      selectedInterview: selectedInterview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"interviews-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Scheduled Interviews\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), interviews.length > 0 ? interviews.map(interview => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"interview-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), \" \", interview.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this), \" \", interview.time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Location:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this), \" \", interview.location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `status ${getStatusClass(interview.status)}`,\n            children: interview.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"view-btn\",\n            onClick: () => handleViewDetails(interview),\n            children: \"View\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reschedule-btn\",\n            onClick: () => handleReschedule(interview),\n            children: \"Reschedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-btn\",\n            onClick: () => handleCancelInterview(interview.id),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)]\n      }, interview.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-interviews\",\n        children: \"No interviews scheduled.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployerDashboard, \"qg46yl6ybxS76z5SPWDRe2LBpeY=\");\n_c = EmployerDashboard;\nexport default EmployerDashboard;\nvar _c;\n$RefreshReg$(_c, \"EmployerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","InterviewService","CreateInterviewForm","jsxDEV","_jsxDEV","EmployerDashboard","_s","interviews","setInterviews","isFormVisible","setIsFormVisible","selectedInterview","setSelectedInterview","fetchInterviews","response","getInterviewsByEmployerId","data","error","console","handleInterviewCreated","newInterview","prev","handleCancelInterview","id","cancelInterview","alert","handleReschedule","interview","handleViewDetails","JSON","stringify","getStatusClass","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClose","onInterviewCreated","length","map","date","time","location","_c","$RefreshReg$"],"sources":["C:/Users/kdigarse/Documents/interview_neww/src/pages/EmployerDashboard/EmployerDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport InterviewService from \"../../services/interviewService\";\r\nimport CreateInterviewForm from \"./CreateInterviewForm\";\r\nimport \"./EmployerDashboard.css\";\r\n\r\nconst EmployerDashboard = () => {\r\n  const [interviews, setInterviews] = useState([]);\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [selectedInterview, setSelectedInterview] = useState(null);\r\n\r\n  // Fetch interviews for the employer\r\n  const fetchInterviews = async () => {\r\n    try {\r\n      const response = await InterviewService.getInterviewsByEmployerId(1); // Replace with the actual employer ID\r\n      setInterviews(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching interviews:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchInterviews();\r\n  }, []);\r\n\r\n  // Handle interview creation\r\n  const handleInterviewCreated = (newInterview) => {\r\n    setInterviews((prev) => [...prev, newInterview]);\r\n    setIsFormVisible(false);\r\n  };\r\n\r\n  // Handle interview cancellation\r\n  const handleCancelInterview = async (id) => {\r\n    try {\r\n      await InterviewService.cancelInterview(id);\r\n      alert(\"Interview cancelled successfully!\");\r\n      fetchInterviews();\r\n    } catch (error) {\r\n      console.error(\"Error cancelling interview:\", error);\r\n      alert(\"Failed to cancel the interview.\");\r\n    }\r\n  };\r\n\r\n  // Handle rescheduling\r\n  const handleReschedule = (interview) => {\r\n    setSelectedInterview(interview);\r\n    setIsFormVisible(true);\r\n  };\r\n\r\n  // Handle viewing interview details\r\n  const handleViewDetails = (interview) => {\r\n    alert(JSON.stringify(interview, null, 2));\r\n  };\r\n\r\n  // Get CSS class for status\r\n  const getStatusClass = (status) => {\r\n    switch (status) {\r\n      case \"Scheduled\":\r\n        return \"status-scheduled\";\r\n      case \"Cancelled\":\r\n        return \"status-cancelled\";\r\n      case \"Done\":\r\n        return \"status-done\";\r\n      default:\r\n        return \"status-unknown\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"employer-dashboard\">\r\n      <h1>Employer Dashboard</h1>\r\n      <button\r\n        className=\"create-btn\"\r\n        onClick={() => {\r\n          setIsFormVisible(true);\r\n          setSelectedInterview(null);\r\n        }}\r\n      >\r\n        Create Interview\r\n      </button>\r\n\r\n      {isFormVisible && (\r\n        <CreateInterviewForm\r\n          onClose={() => setIsFormVisible(false)}\r\n          onInterviewCreated={handleInterviewCreated}\r\n          selectedInterview={selectedInterview}\r\n        />\r\n      )}\r\n\r\n      <div className=\"interviews-list\">\r\n        <h2>Scheduled Interviews</h2>\r\n        {interviews.length > 0 ? (\r\n          interviews.map((interview) => (\r\n            <div className=\"interview-card\" key={interview.id}>\r\n              <p>\r\n                <strong>Date:</strong> {interview.date}\r\n              </p>\r\n              <p>\r\n                <strong>Time:</strong> {interview.time}\r\n              </p>\r\n              <p>\r\n                <strong>Location:</strong> {interview.location}\r\n              </p>\r\n              <p>\r\n                <strong>Status:</strong>{\" \"}\r\n                <span className={`status ${getStatusClass(interview.status)}`}>\r\n                  {interview.status}\r\n                </span>\r\n              </p>\r\n              <div className=\"actions\">\r\n                <button\r\n                  className=\"view-btn\"\r\n                  onClick={() => handleViewDetails(interview)}\r\n                >\r\n                  View\r\n                </button>\r\n                <button\r\n                  className=\"reschedule-btn\"\r\n                  onClick={() => handleReschedule(interview)}\r\n                >\r\n                  Reschedule\r\n                </button>\r\n                <button\r\n                  className=\"cancel-btn\"\r\n                  onClick={() => handleCancelInterview(interview.id)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p className=\"no-interviews\">No interviews scheduled.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployerDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}